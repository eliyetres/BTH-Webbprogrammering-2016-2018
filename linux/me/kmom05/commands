#!/bin/bash
#
#  Bash script for commands
#
# Exit values:
#  0 on success
#  1 on failure
#


#
# Variables
#
SCRIPT=$( basename "bash script" )
STUDENT=$( basename "elhb16" )
VERSION="1.0.0"

#
# If user doesn't include arguments
#
if [[ $# -eq 0 ]]; then
    echo "type --help, -h for available commands."
    exit 0
fi
#
# Message to display for usage and help
#
function usage
{
    local txt=(
"Utility $SCRIPT for doing stuff by $STUDENT."
"Usage: $SCRIPT [options] <command> [arguments]"
""
"Command:"
"  factors [number1 number2 etc]    Print prime factors."
"  starwars   						Runs telnet command."
"  reverse   						Print arguments in reverse."
   
""
"Options:"
"  --help, -h     Print help."
"  --version, -h  Print version."
    )
    
    printf "%s\n" "${txt[@]}"
}

#
# Message to display when bad usage
#
function badUsage
{
    local message="$1"
    local txt=(
"For an overview of the command, execute:"
"$SCRIPT --help"
    )
    
    [[ $message ]] && echo "$message"

    printf "%s\n" "${txt[@]}"
}

#
# Prime factor, check if argument/s is divisible, print arg + factors
#
function f
{
 	num=$1
 	printf "%s: " "$num"
	for (( i=2; i <= $1; i++ ));do
		while [ $((num%i)) -eq 0 ];do
			printf "%s " "$i"
			num=$((num/i))
		done
	done
	printf "\n"
}

#
# Process options
#
while (( $# ))
do
    case "$1" in

        --help | -h)
            usage
            exit 0
        ;;

        --version | -v)
            echo "version $VERSION"
            exit 0
        ;;

        reverse)
			echo "${@:2}"  | rev 
			exit 0
		;;

		factors)
			# For each argument taken, do f function
			for ((arg=2; arg<=$#; arg++)); do
				f ${!arg}
			done
			exit 0
		;;

		starwars)
			telnet towel.blinkenlights.nl
			exit 0
		;;

		*)
		badUsage "Option/command not recognized."
		exit 1

		;;
    esac
done
